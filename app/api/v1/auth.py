from fastapi import APIRouter, HTTPException, status, Depends
from app.models.databases.users import Usuario, db
from sqlalchemy.orm import Session
from app.config import Config
from app.models.schemas.users import LoginModel, TokenResponse
import jwt
from datetime import datetime, timedelta
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials

router = APIRouter(tags=["Authentication"])
security = HTTPBearer()


def get_current_user(credentials: HTTPAuthorizationCredentials = Depends(security)):  # noqa: E501
    try:
        payload = jwt.decode(
            credentials.credentials,
            Config.SECRET_KEY,
            algorithms=[getattr(Config, 'ALGORITHM', 'HS256')]
        )
        return payload
    except jwt.ExpiredSignatureError:
        raise HTTPException(status_code=401, detail="Token expirado")
    except jwt.InvalidTokenError:
        raise HTTPException(status_code=401, detail="Token inv치lido")


@router.post('/api/v1/login', response_model=TokenResponse)
def login(request: LoginModel):
    """### 游댏 Login
    Este endpoint permite que um usu치rio fa칞a login no sistema.
    #### Como usar:
    - Fa칞a uma requisi칞칚o POST para `/api/v1/login` com o email e senha do usu치rio.
    - Os dados devem ser enviados no corpo da requisi칞칚o no formato JSON.
    - A resposta incluir치 um token JWT que deve ser usado para autentica칞칚o em outros endpoints.
    """  # noqa: E501
    session = Session(bind=db)
    user = session.query(Usuario).filter_by(email=request.email).first()
    session.close()
    if not user or user.senha != request.senha:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Email ou senha inv치lidos."
        )
    expire = datetime.utcnow() + timedelta(minutes=1)
    payload = {
        "sub": user.email,
        "name": user.nome,
        "admin": user.admin,
        "exp": expire
    }
    token = jwt.encode(
        payload,
        Config.SECRET_KEY,
        algorithm=getattr(
            Config,
            'ALGORITHM',
            'HS256'
        )
    )
    return {
        "access_token": token,
        "token_type": "bearer"
    }
